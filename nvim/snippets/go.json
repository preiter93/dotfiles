{
    "switch statement": {
        "prefix": "switch",
        "body": "switch ${1:expression} {\ncase ${2:condition}:\n\t$0\n}",
        "description": "Snippet for switch statement"
    },
    "select statement": {
        "prefix": "sel",
        "body": "select {\ncase ${1:condition}:\n\t$0\n}",
        "description": "Snippet for select statement"
    },
    "for n statement": {
        "prefix": "fori",
        "body": "for ${1:i} := ${2:0}; $1 < ${3:count}; $1${4:++} {\n\t$0\n}",
        "description": "Snippet for a for loop"
    },
    "for range statement": {
        "prefix": "forr",
        "body": "for ${1:_, }${2:v} := range ${3:v} {\n\t$0\n}",
        "description": "Snippet for a for range loop"
    },
    "if else statement": {
        "prefix": "ifelse",
        "body": "if ${1:condition} {\n\t$2\n} else {\n\t$0\n}",
        "description": "Snippet for if else"
    },
    "if err != nil": {
        "prefix": "iferr",
        "body": "if err != nil {\n\t${1:return ${2:nil, }${3:err}}\n}",
        "description": "Snippet for if err != nil"
    },
    "fmt.Printf": {
        "prefix": "ff",
        "body": "fmt.Printf(\"$1 %v\", ${2:var})",
        "description": "Snippet for fmt.Printf()"
    },
    "logger.Printf": {
        "prefix": "logger",
        "body": "logger.Infof(\"$1 %v\", ${2:var})",
        "description": "Snippet for fmt.Printf()"
    },
    "if key in a map": {
        "prefix": "keyInMap",
        "body": "if val, ok := ${1:myMap}[${2:myKey}]; ok {\n\t$3\n}"
    },
    "diff in test": {
        "prefix": "diff",
        "body": [
            "if diff := cmp.Diff(tc.${1:want}, ${2:got}); diff != \"\" {",
            "	t.Errorf(\"${3:response} mismatch (-want, +got): %s\", diff)",
            "}"
        ],
        "description": "Do a diff in a test"
    },
    "diff in test with a proto": {
        "prefix": "diffProto",
        "body": [
            "if diff := cmp.Diff(tc.${1:want}, ${2:got}, protocmp.Transform()); diff != \"\" {",
            "	t.Errorf(\"${3:response} mismatch (-want, +got): %s\", diff)",
            "}"
        ],
        "description": "Do a diff in a test with a proto"
    },
    "diff in test with an error": {
        "prefix": "diffError",
        "body": [
            "if diff := cmp.Diff(tc.${1:want}, ${2:got}, cmpopts.EquateErrors()); diff != \"\" {",
            "	t.Errorf(\"${3:error} mismatch (-want, +got): %s\", diff)",
            "}"
        ],
        "description": "Do a diff in a test with an error"
    },
    "table driven test": {
        "prefix": "table",
        "body": [
            "func Test_${1:Name}(t *testing.T) {",
            "	tests := []struct {",
            "		name     string",
            "		givenReq *pb.GetTreatmentReq",
            "		wantResp *pb.GetTreatmentResp",
            "		wantErr  error",
            "	}{",
            "		{",
            "			name:     \"happy path\",",
            "			wantResp: &pb.GetTreatmentResp{},",
            "		},",
            "		{",
            "			name:    \"error\",",
            "			wantErr: status.Error(codes.InvalidArgument, \"invalid argument\"),",
            "		},",
            "	}",
            "	for _, tc := range tests {",
            "		t.Run(tc.name, func(t *testing.T) {",
            "			// given",
            "			ctx := context.Background()",
            "			s := &server{}",
            "",
            "			// when",
            "			got, err := ${2: s.GetTreatment(ctx, tc.givenReq)}",
            "",
            "			// then",
            "			if diff := cmp.Diff(tc.wantErr, err, cmpopts.EquateErrors()); diff != \"\" {",
            "				t.Errorf(\"error mismatch (-want, +got):\\n%s\", diff)",
            "			}",
            "			if diff := cmp.Diff(tc.wantResp, got, protocmp.Transform()); diff != \"\" {",
            "				t.Errorf(\"response mismatch (-want, +got):\\n%s\", diff)",
            "			}",
            "		})",
            "	}",
            "}"
        ],
        "description": "Create a basic table-driven test"
    }
}
