{
    "Stateless Widget": {
        "prefix": "statelessW",
        "body": [
            "/// A widget that displays ...",
            "class ${1:name} extends StatelessWidget {",
            "  /// Creates a new [${1:name}] instance.",
            "  const ${1:name}({Key? key}): super(key: key);\n",
            "  @override",
            "  Widget build(BuildContext context) {",
            "    return ${2:Container()};",
            "  }",
            "}"
        ],
        "description": "Create a Stateless widget"
    },
    "Stateful Widget": {
        "prefix": "statefulW",
        "body": [
            "/// A widget that displays ...",
            "class ${1:name} extends StatefulWidget {",
            "  /// Creates a new [${1:name}] instance.",
            "  const ${1:name}({Key? key}): super(key: key);\n",
            "  @override",
            "  State<${1:WidgetName}> createState() => _${1:WidgetName}State();",
            "}\n",
            "class _${1:index}State extends State<${1:index}> {",
            "  @override",
            "  Widget build(BuildContext context) {",
            "    return ${2:Container()};",
            "  }",
            "}"
        ],
        "description": "Create a Stateful widget"
    },
    "Build Method": {
        "prefix": "build",
        "body": [
            "@override",
            "Widget build(BuildContext context) {",
            "  return ${0:};",
            "}"
        ],
        "description": "Describes the part of the user interface represented by this widget."
    },
    "InitState ": {
        "prefix": "initS",
        "body": [
            "@override",
            "void initState() { ",
            "  super.initState();",
            "  ${0:}",
            "}"
        ],
        "description": "Called when this object is inserted into the tree. The framework will call this method exactly once for each State object it creates."
    },
    "Dispose": {
        "prefix": "dis",
        "body": [
            "@override",
            "void dispose() { ",
            "  ${0:}",
            "  super.dispose();",
            "}"
        ],
        "description": "Called when this object is removed from the tree permanently. The framework calls this method when this State object will never build again."
    },
    "Selector": {
        "prefix": "sel",
        "body": [
            "Selector<${1:MyState}, ${2:MyModel}>(",
            "    selector: (_, state) {",
            "       return ${2:MyModel}();",
            "    },",
            "    builder: (_, model, __) {",
            "       return ${3:MyPage}(model: model);",
            "    },",
            " );"
        ],
        "description": "Creates a Selector."
    },
    "Test": {
        "prefix": "unitTest",
        "body": ["test(", "   '${1:test description}',", "   () {},", ");"],
        "description": "Create a unit test function"
    },
    "Test Widgets": {
        "prefix": "widgetTest",
        "body": [
            "testWidgets(",
            "   '${1:test description}',",
            "   (WidgetTester tester) async {},",
            ");"
        ],
        "description": "Create a widget test function"
    },
    "Table Test Widgets": {
        "prefix": "tableTest",
        "body": [
            "group('MyWidget tests', () {",
            "  final testCases = [",
            "    {",
            "      'name': 'Test 1',",
            "    },",
            "  ];",
            "",
            "  for (final data in testCases) {",
            "    final name = data['name']! as String;",
            "",
            "    testWidgets('$$name', (WidgetTester tester) async {",
            "      final app = Container();",
            "      await tester.pumpWidget(",
            "        TestApp(child: app),",
            "      );",
            "    });",
            "   }",
            " });"
        ],
        "description": "Create a table test function"
    }
}

